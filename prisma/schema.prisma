// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model user {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  medical   medical?
  patient   patient?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model consultation {
  id                  Int           @id @default(autoincrement())
  reasonsConsultation String
  plan                String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  trataments          tratament[]
  medicalRecordid     Int
  medicalRecord       medicalRecord @relation(fields: [medicalRecordid], references: [id])

  @@map("consultation")
}

model tratament {
  id             Int          @id @default(autoincrement())
  name           String
  unidad         String
  dosis          Int
  type           String
  consultationId Int
  consultation   consultation @relation(fields: [consultationId], references: [id])
  startDate      DateTime     @default(now())
  endDate        DateTime     @updatedAt

  @@map("tratament")
}

model medicalRecord {
  id           Int            @id @default(autoincrement())
  num          String
  healthunitid Int
  patientid    Int            @unique
  patient      patient        @relation(fields: [patientid], references: [id])
  healthunit   healthunit     @relation(fields: [healthunitid], references: [id])
  consultation consultation[]

  @@map("medicalRecord")
}

model healthunit {
  id            Int             @id @default(autoincrement())
  name          String
  latitude      String
  longitude     String
  num           String
  medical       medical[]
  medicalRecord medicalRecord[]

  @@map("healthunit")
}

model medical {
  id           Int        @id @default(autoincrement())
  name         String
  lastname     String
  healthunitid Int
  userid       Int        @unique
  specialityid Int
  healthunit   healthunit @relation(fields: [healthunitid], references: [id])
  user         user       @relation(fields: [userid], references: [id])
  speciality   speciality @relation(fields: [specialityid], references: [id])

  @@map("medical")
}

model speciality {
  id      Int       @id @default(autoincrement())
  name    String
  medical medical[]

  @@map("speciality")
}

model patient {
  id             Int            @id @default(autoincrement())
  idCard         String         @unique
  name           String
  lastname       String
  address        String
  inssnumber     String
  ocupation      String
  birthDate      DateTime
  sex            Boolean
  number         String
  bloodType      String         @db.VarChar(3)
  districid      Int
  municipalityid Int
  userid         Int            @unique
  medicalRecord  medicalRecord? @relation
  user           user           @relation(fields: [userid], references: [id])
  municipality   municipality   @relation(fields: [municipalityid], references: [id])
  distric        distric        @relation(fields: [districid], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("patient")
}

model municipality {
  id        Int       @id @default(autoincrement())
  name      String
  districid Int
  distric   distric   @relation(fields: [districid], references: [id])
  patient   patient[]
}

model distric {
  id           Int            @id @default(autoincrement())
  name         String
  municipality municipality[]
  patient      patient[]
}
