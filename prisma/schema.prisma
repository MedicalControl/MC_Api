generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model administrador {
  pk_administrador Int     @id(map: "administrador_pk") @default(autoincrement())
  nombres          String  @db.VarChar(100)
  fk_usuario       Int
  usuario          usuario @relation(fields: [fk_usuario], references: [pk_usuario], onDelete: NoAction, onUpdate: NoAction, map: "administrador_usuario_fk")
}

model agendacita {
  pk_agendacita Int      @id @default(autoincrement())
  fechahora        DateTime 
  estado        estado @default(Revision)
  fk_paciente   Int
  fk_doctor     Int
  doctor        doctor   @relation(fields: [fk_doctor], references: [pk_doctor], onDelete: NoAction, onUpdate: NoAction)
  paciente      paciente @relation(fields: [fk_paciente], references: [pk_paciente], onDelete: NoAction, onUpdate: NoAction)
  cita          cita[]
}

model cita {
  pk_cita          Int                @id(map: "citas_pkey") @default(autoincrement())
  motivo           String
  sintomas         String
  diagnostico      String
  indicaciones     String
  fk_agendacita    Int
  fk_expediente    Int
  agendacita       agendacita         @relation(fields: [fk_agendacita], references: [pk_agendacita], onDelete: NoAction, onUpdate: NoAction, map: "cita_agendacita_fk")
  expediente       expediente         @relation(fields: [fk_expediente], references: [pk_expediente], onDelete: NoAction, onUpdate: NoAction, map: "cita_expediente_fk")
  ordenlaboratorio ordenlaboratorio[]
  recetamedica     recetamedica[]
}

model departamento {
  pk_departamento Int         @id @default(autoincrement())
  nombre          String      @db.VarChar(50)
  municipio       municipio[]
}

model doctor {
  pk_doctor       Int          @id @default(autoincrement())
  nombres         String       @db.VarChar(50)
  fk_especialidad Int
  apellidos       String       @db.VarChar(30)
  direccion       String       @db.VarChar(100)
  telefono        String       @db.VarChar(10)
  fk_usuario      Int
  agendacita      agendacita[]
  especialidad    especialidad @relation(fields: [fk_especialidad], references: [pk_especialidad], onDelete: NoAction, onUpdate: NoAction)
  usuario         usuario      @relation(fields: [fk_usuario], references: [pk_usuario], onDelete: NoAction, onUpdate: NoAction, map: "doctor_usuario_fk")
}

model especialidad {
  pk_especialidad Int      @id @default(autoincrement())
  nombre          String   @db.VarChar(20)
  doctor          doctor[]
}

model examenheces {
  pk_examenheces Int         @id(map: "examenheces_pk") @default(autoincrement())
  resultado      String
  fk_ordenexamen Int
  fk_laboratorio Int
  laboratorio    laboratorio @relation(fields: [fk_laboratorio], references: [pk_laboratorio], onDelete: NoAction, onUpdate: NoAction, map: "examenheces_laboratorio_fk")
  ordenexamen    ordenexamen @relation(fields: [fk_ordenexamen], references: [pk_ordenexamen], onDelete: NoAction, onUpdate: NoAction, map: "examenheces_ordenexamen_fk")
}

model examenorina {
  pk_examenorina Int         @id(map: "examenorina_pk") @default(autoincrement())
  resultado      String
  fk_ordenexamen Int
  fk_laboratorio Int
  laboratorio    laboratorio @relation(fields: [fk_laboratorio], references: [pk_laboratorio], onDelete: NoAction, onUpdate: NoAction, map: "examenorina_laboratorio_fk")
  ordenexamen    ordenexamen @relation(fields: [fk_ordenexamen], references: [pk_ordenexamen], onDelete: NoAction, onUpdate: NoAction, map: "examenorina_ordenexamen_fk")
}

model examensangre {
  resultado       String
  fk_ordenexamen  Int
  fk_laboratorio  Int
  pk_examensangre Int         @id(map: "examensangre_pk") @default(autoincrement())
  laboratorio     laboratorio @relation(fields: [fk_laboratorio], references: [pk_laboratorio], onDelete: NoAction, onUpdate: NoAction, map: "examensangre_laboratorio_fk")
  ordenexamen     ordenexamen @relation(fields: [fk_ordenexamen], references: [pk_ordenexamen], onDelete: NoAction, onUpdate: NoAction, map: "examensangre_ordenexamen_fk")
}

model expediente {
  pk_expediente Int      @id @default(autoincrement())
  fk_paciente   Int
  nroexpediente String   @db.VarChar
  cita          cita[]
  paciente      paciente @relation(fields: [fk_paciente], references: [pk_paciente], onDelete: NoAction, onUpdate: NoAction)
}

model laboratorio {
  pk_laboratorio Int            @id(map: "laboratorio_pk") @default(autoincrement())
  nombre         String         @db.VarChar(50)
  examenheces    examenheces[]
  examenorina    examenorina[]
  examensangre   examensangre[]
}

model medicamento {
  pk_medicamento     Int                 @id @default(autoincrement())
  nombre             String              @db.VarChar(50)
  fk_tipomedicamento Int
  tipomedicamento    tipomedicamento     @relation(fields: [fk_tipomedicamento], references: [pk_tipomedicamento], onDelete: NoAction, onUpdate: NoAction, map: "medicamento_tipomedicamento_fk")
  recetatratamiento  recetatratamiento[]
}

model municipio {
  pk_municipio    Int          @id @default(autoincrement())
  fk_departamento Int
  nombre          String       @db.VarChar(50)
  departamento    departamento @relation(fields: [fk_departamento], references: [pk_departamento], onDelete: NoAction, onUpdate: NoAction)
  paciente        paciente[]
}

model ordenexamen {
  pk_ordenexamen      Int              @id @default(autoincrement())
  fk_tipoexamen       Int
  estado              String           @db.VarChar(10)
  fk_ordenlaboratorio Int
  examenheces         examenheces[]
  examenorina         examenorina[]
  examensangre        examensangre[]
  tipoexamen          tipoexamen       @relation(fields: [fk_tipoexamen], references: [pk_tipoexamen], onDelete: NoAction, onUpdate: NoAction)
  ordenlaboratorio    ordenlaboratorio @relation(fields: [fk_ordenlaboratorio], references: [pk_ordenlaboratorio], onDelete: NoAction, onUpdate: NoAction, map: "ordenexamen_ordenlaboratorio_fk")
}

model ordenlaboratorio {
  fk_cita             Int
  pk_ordenlaboratorio Int           @id(map: "ordenlaboratorio_pk") @default(autoincrement())
  ordenexamen         ordenexamen[]
  cita                cita          @relation(fields: [fk_cita], references: [pk_cita], onDelete: NoAction, onUpdate: NoAction, map: "ordenlaboratorio_cita_fk")
}

model paciente {
  pk_paciente     Int               @id(map: "pacientes_pkey") @default(autoincrement())
  nombres         String            @db.VarChar(50)
  direccion       String?           @db.VarChar(100)
  telefono        String?           @db.VarChar(15)
  fechanacimiento DateTime          @db.Date
  sexo            Boolean
  estadocivil     String            @db.VarChar(20)
  ocupacion       String            @db.VarChar(20)
  escolaridad     String            @db.VarChar(20)
  apellidos       String            @db.VarChar(50)
  religion        String            @db.VarChar(20)
  nombrepad       String?           @db.VarChar(50)
  nombremad       String?           @db.VarChar(50)
  fk_municipio    Int
  nrocedula       String            @db.VarChar(30) @unique
  agendacita      agendacita[]
  expediente      expediente[]
  municipio       municipio         @relation(fields: [fk_municipio], references: [pk_municipio], onDelete: NoAction, onUpdate: NoAction, map: "paciente_municipio_fk")
  pacienteusuario pacienteusuario[]
}

model pacienteusuario {
  pk_pacienteusuario Int      @id(map: "pacienteusuario_pk") @default(autoincrement())
  fk_paciente        Int
  fk_usuario         Int
  paciente           paciente @relation(fields: [fk_paciente], references: [pk_paciente], onDelete: NoAction, onUpdate: NoAction, map: "pacienteusuario_paciente_fk")
  usuario            usuario  @relation(fields: [fk_usuario], references: [pk_usuario], onDelete: NoAction, onUpdate: NoAction, map: "pacienteusuario_usuario_fk")
}

model recetamedica {
  pk_recetamedica   Int                 @id(map: "recetamedica_pk")
  fk_cita           Int
  cita              cita                @relation(fields: [fk_cita], references: [pk_cita], onDelete: NoAction, onUpdate: NoAction, map: "recetamedica_cita_fk")
  recetatratamiento recetatratamiento[]
}

model recetatratamiento {
  pk_recetatratamiento Int          @id @default(autoincrement())
  cantidad             Int          @db.SmallInt
  fk_medicamento       Int
  fk_recetamedica      Int
  frecuencia           String       @db.VarChar(30)
  medicamento          medicamento  @relation(fields: [fk_medicamento], references: [pk_medicamento], onDelete: NoAction, onUpdate: NoAction)
  recetamedica         recetamedica @relation(fields: [fk_recetamedica], references: [pk_recetamedica], onDelete: NoAction, onUpdate: NoAction, map: "recetatratamiento_recetamedica_fk")
}

model tipoexamen {
  pk_tipoexamen Int           @id @default(autoincrement())
  nombre        String        @db.VarChar(50)
  ordenexamen   ordenexamen[]
}

model tipomedicamento {
  pk_tipomedicamento Int           @id(map: "tipomedicamento_pk") @default(autoincrement())
  nombre             String        @db.VarChar(20)
  medicamento        medicamento[]
}

model usuario {
  contrasena      String            @map("contrase√±a") @db.VarChar(80)
  pk_usuario      Int               @id(map: "usuario_pk") @default(autoincrement())
  correo          String            @db.VarChar(30) @unique
  rol             rol               @default(USER)
  administrador   administrador[]
  doctor          doctor[]
  pacienteusuario pacienteusuario[]
}

enum rol {
  USER
  DOCTOR
  ADMIN
}

enum estado {
  Pendiente
  Cancelado
  Realizado
  Revision
}
